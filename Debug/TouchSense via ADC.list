
TouchSense via ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aec  08002aec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002af4  08002af4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002af8  08002af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002b08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002b08  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad38  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001783  00000000  00000000  0002ad72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a80  00000000  00000000  0002c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b8  00000000  00000000  0002cf78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026bc1  00000000  00000000  0002d930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000801c  00000000  00000000  000544f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f577c  00000000  00000000  0005c50d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151c89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b78  00000000  00000000  00151d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002ac4 	.word	0x08002ac4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002ac4 	.word	0x08002ac4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <app_main>:
 * @return The current ADC value
*/
static uint16_t TouchSense(void);

void app_main()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2101      	movs	r1, #1
 8000540:	480e      	ldr	r0, [pc, #56]	; (800057c <app_main+0x44>)
 8000542:	f001 f9cb 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8000546:	480e      	ldr	r0, [pc, #56]	; (8000580 <app_main+0x48>)
 8000548:	f001 fe7e 	bl	8002248 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		if(ADC_value < TOUCH_THRESHOLD)
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <app_main+0x4c>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000554:	d206      	bcs.n	8000564 <app_main+0x2c>
		{
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <app_main+0x44>)
 800055e:	f001 f9bd 	bl	80018dc <HAL_GPIO_WritePin>
 8000562:	e7f3      	b.n	800054c <app_main+0x14>
		}
		else if(ADC_value >= TOUCH_THRESHOLD)
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <app_main+0x4c>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800056c:	d3ee      	bcc.n	800054c <app_main+0x14>
		{
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000574:	4801      	ldr	r0, [pc, #4]	; (800057c <app_main+0x44>)
 8000576:	f001 f9b1 	bl	80018dc <HAL_GPIO_WritePin>
		if(ADC_value < TOUCH_THRESHOLD)
 800057a:	e7e7      	b.n	800054c <app_main+0x14>
 800057c:	40020400 	.word	0x40020400
 8000580:	20000074 	.word	0x20000074
 8000584:	20000028 	.word	0x20000028

08000588 <TouchSense>:
		}
	}
}

static uint16_t TouchSense()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	463b      	mov	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
	uint16_t result = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	84fb      	strh	r3, [r7, #38]	; 0x26

	/*Configure GPIO pins : CapTouch_Second pin and set it to VDD */
	GPIO_InitStruct.Pin = CapTouch_Second_Pin;
 80005ae:	2301      	movs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CapTouch_Second_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4619      	mov	r1, r3
 80005c4:	4825      	ldr	r0, [pc, #148]	; (800065c <TouchSense+0xd4>)
 80005c6:	f000 ffdf 	bl	8001588 <HAL_GPIO_Init>

	/* Point ADC to secondary line to charge the ADC cap*/
	sConfig.Channel = ADC_CHANNEL_10;
 80005ca:	230a      	movs	r3, #10
 80005cc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	4619      	mov	r1, r3
 80005da:	4821      	ldr	r0, [pc, #132]	; (8000660 <TouchSense+0xd8>)
 80005dc:	f000 fc7e 	bl	8000edc <HAL_ADC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <TouchSense+0x62>
	{
		Error_Handler();
 80005e6:	f000 f9ef 	bl	80009c8 <Error_Handler>
	}

	/*Configure GPIO pins : CapTouch_Second and ground the pin*/
	GPIO_InitStruct.Pin = CapTouch_Sensor_Pin;
 80005ea:	2301      	movs	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CapTouch_Sensor_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	4818      	ldr	r0, [pc, #96]	; (8000664 <TouchSense+0xdc>)
 8000602:	f000 ffc1 	bl	8001588 <HAL_GPIO_Init>

	/*Configure GPIO pins : Set sensor line as input */
	GPIO_InitStruct.Pin = CapTouch_Sensor_Pin;
 8000606:	2301      	movs	r3, #1
 8000608:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CapTouch_Sensor_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	4619      	mov	r1, r3
 800061c:	4811      	ldr	r0, [pc, #68]	; (8000664 <TouchSense+0xdc>)
 800061e:	f000 ffb3 	bl	8001588 <HAL_GPIO_Init>

	/* Point ADC to sensor channel*/
	sConfig.Channel = ADC_CHANNEL_3;
 8000622:	2303      	movs	r3, #3
 8000624:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000626:	2301      	movs	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <TouchSense+0xd8>)
 8000634:	f000 fc52 	bl	8000edc <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <TouchSense+0xba>
	{
		Error_Handler();
 800063e:	f000 f9c3 	bl	80009c8 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <TouchSense+0xd8>)
 8000644:	f000 fb7c 	bl	8000d40 <HAL_ADC_Start>
	result = HAL_ADC_GetValue(&hadc1);
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <TouchSense+0xd8>)
 800064a:	f000 fc39 	bl	8000ec0 <HAL_ADC_GetValue>
 800064e:	4603      	mov	r3, r0
 8000650:	84fb      	strh	r3, [r7, #38]	; 0x26

	return result;
 8000652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8000654:	4618      	mov	r0, r3
 8000656:	3728      	adds	r7, #40	; 0x28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020800 	.word	0x40020800
 8000660:	2000002c 	.word	0x2000002c
 8000664:	40020000 	.word	0x40020000

08000668 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	  if (htim == &htim1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d105      	bne.n	8000684 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  {
		  ADC_value = TouchSense();
 8000678:	f7ff ff86 	bl	8000588 <TouchSense>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000682:	801a      	strh	r2, [r3, #0]
	  }
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000074 	.word	0x20000074
 8000690:	20000028 	.word	0x20000028

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fab1 	bl	8000bfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f80a 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f90a 	bl	80008b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a4:	f000 f862 	bl	800076c <MX_ADC1_Init>
  MX_TIM1_Init();
 80006a8:	f000 f8b2 	bl	8000810 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  app_main();
 80006ac:	f7ff ff44 	bl	8000538 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x1c>
	...

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 f9f6 	bl	8002ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xb0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xb0>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xb0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <SystemClock_Config+0xb4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <SystemClock_Config+0xb4>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <SystemClock_Config+0xb4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4618      	mov	r0, r3
 8000722:	f001 f8f5 	bl	8001910 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800072c:	f000 f94c 	bl	80009c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fb8d 	bl	8001e6c <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000758:	f000 f936 	bl	80009c8 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	; 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC1_Init+0x98>)
 8000780:	4a21      	ldr	r2, [pc, #132]	; (8000808 <MX_ADC1_Init+0x9c>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_ADC1_Init+0x98>)
 8000786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_ADC1_Init+0xa0>)
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_ADC1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ADC1_Init+0x98>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ce:	f000 fa73 	bl	8000cb8 <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 f8f6 	bl	80009c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007dc:	2303      	movs	r3, #3
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ee:	f000 fb75 	bl	8000edc <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f8:	f000 f8e6 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000002c 	.word	0x2000002c
 8000808:	40012000 	.word	0x40012000
 800080c:	0f000001 	.word	0x0f000001

08000810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_TIM1_Init+0xa0>)
 8000830:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <MX_TIM1_Init+0xa4>)
 8000832:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_TIM1_Init+0xa0>)
 8000836:	f240 623f 	movw	r2, #1599	; 0x63f
 800083a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_TIM1_Init+0xa0>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_TIM1_Init+0xa0>)
 8000844:	2209      	movs	r2, #9
 8000846:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_TIM1_Init+0xa0>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_TIM1_Init+0xa0>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_TIM1_Init+0xa0>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800085a:	4815      	ldr	r0, [pc, #84]	; (80008b0 <MX_TIM1_Init+0xa0>)
 800085c:	f001 fcc8 	bl	80021f0 <HAL_TIM_Base_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000866:	f000 f8af 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4619      	mov	r1, r3
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <MX_TIM1_Init+0xa0>)
 8000878:	f001 fe30 	bl	80024dc <HAL_TIM_ConfigClockSource>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000882:	f000 f8a1 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <MX_TIM1_Init+0xa0>)
 8000898:	f002 f83c 	bl	8002914 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008a2:	f000 f891 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3720      	adds	r7, #32
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000074 	.word	0x20000074
 80008b4:	40010000 	.word	0x40010000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <MX_GPIO_Init+0xfc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a38      	ldr	r2, [pc, #224]	; (80009b4 <MX_GPIO_Init+0xfc>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <MX_GPIO_Init+0xfc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <MX_GPIO_Init+0xfc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a32      	ldr	r2, [pc, #200]	; (80009b4 <MX_GPIO_Init+0xfc>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_GPIO_Init+0xfc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_GPIO_Init+0xfc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <MX_GPIO_Init+0xfc>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_GPIO_Init+0xfc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <MX_GPIO_Init+0xfc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <MX_GPIO_Init+0xfc>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <MX_GPIO_Init+0xfc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_GPIO_Init+0xfc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a20      	ldr	r2, [pc, #128]	; (80009b4 <MX_GPIO_Init+0xfc>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_GPIO_Init+0xfc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f244 0181 	movw	r1, #16513	; 0x4081
 800094c:	481a      	ldr	r0, [pc, #104]	; (80009b8 <MX_GPIO_Init+0x100>)
 800094e:	f000 ffc5 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_GPIO_Init+0x104>)
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4816      	ldr	r0, [pc, #88]	; (80009c0 <MX_GPIO_Init+0x108>)
 8000968:	f000 fe0e 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800096c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <MX_GPIO_Init+0x100>)
 8000986:	f000 fdff 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800098a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800099c:	2307      	movs	r3, #7
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <MX_GPIO_Init+0x10c>)
 80009a8:	f000 fdee 	bl	8001588 <HAL_GPIO_Init>

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400
 80009bc:	10110000 	.word	0x10110000
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020c00 	.word	0x40020c00

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ce:	e7fe      	b.n	80009ce <Error_Handler+0x6>

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x44>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <HAL_ADC_MspInit+0xa4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d13b      	bne.n	8000ab2 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <HAL_ADC_MspInit+0xa8>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a20      	ldr	r2, [pc, #128]	; (8000ac0 <HAL_ADC_MspInit+0xa8>)
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_ADC_MspInit+0xa8>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_ADC_MspInit+0xa8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a1a      	ldr	r2, [pc, #104]	; (8000ac0 <HAL_ADC_MspInit+0xa8>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_ADC_MspInit+0xa8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_ADC_MspInit+0xa8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <HAL_ADC_MspInit+0xa8>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_ADC_MspInit+0xa8>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CapTouch_Second_Pin;
 8000a82:	2301      	movs	r3, #1
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a86:	2303      	movs	r3, #3
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CapTouch_Second_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <HAL_ADC_MspInit+0xac>)
 8000a96:	f000 fd77 	bl	8001588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CapTouch_Sensor_Pin|CapTouch_SensorA3_Pin;
 8000a9a:	2309      	movs	r3, #9
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <HAL_ADC_MspInit+0xb0>)
 8000aae:	f000 fd6b 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40012000 	.word	0x40012000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020000 	.word	0x40020000

08000acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <HAL_TIM_Base_MspInit+0x44>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d113      	bne.n	8000b06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_TIM_Base_MspInit+0x48>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <HAL_TIM_Base_MspInit+0x48>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_TIM_Base_MspInit+0x48>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2019      	movs	r0, #25
 8000afc:	f000 fd0d 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b00:	2019      	movs	r0, #25
 8000b02:	f000 fd26 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40010000 	.word	0x40010000
 8000b14:	40023800 	.word	0x40023800

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f888 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b72:	f001 fb93 	bl	800229c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000074 	.word	0x20000074

08000b80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <SystemInit+0x28>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <SystemInit+0x28>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SystemInit+0x28>)
 8000b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bb2:	e003      	b.n	8000bbc <LoopCopyDataInit>

08000bb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bba:	3104      	adds	r1, #4

08000bbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bc4:	d3f6      	bcc.n	8000bb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bc8:	e002      	b.n	8000bd0 <LoopFillZerobss>

08000bca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bcc:	f842 3b04 	str.w	r3, [r2], #4

08000bd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bd4:	d3f9      	bcc.n	8000bca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bd6:	f7ff ffd3 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f001 ff47 	bl	8002a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fd59 	bl	8000694 <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000be8:	08002afc 	.word	0x08002afc
  ldr  r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bf0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000bf4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000bf8:	200000b8 	.word	0x200000b8

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>

08000bfe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c02:	2003      	movs	r0, #3
 8000c04:	f000 fc7e 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f000 f805 	bl	8000c18 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c0e:	f7ff fedf 	bl	80009d0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x54>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_InitTick+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fc99 	bl	800156e <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00e      	b.n	8000c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d80a      	bhi.n	8000c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 fc61 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <HAL_InitTick+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	200000b4 	.word	0x200000b4

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	200000b4 	.word	0x200000b4

08000cb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e031      	b.n	8000d32 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d109      	bne.n	8000cea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fe9e 	bl	8000a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d116      	bne.n	8000d24 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_ADC_Init+0x84>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	f043 0202 	orr.w	r2, r3, #2
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 fa32 	bl	8001170 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f023 0303 	bic.w	r3, r3, #3
 8000d1a:	f043 0201 	orr.w	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
 8000d22:	e001      	b.n	8000d28 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	ffffeefd 	.word	0xffffeefd

08000d40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d101      	bne.n	8000d5a <HAL_ADC_Start+0x1a>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e0a0      	b.n	8000e9c <HAL_ADC_Start+0x15c>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d018      	beq.n	8000da2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0201 	orr.w	r2, r2, #1
 8000d7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000d80:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <HAL_ADC_Start+0x168>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a49      	ldr	r2, [pc, #292]	; (8000eac <HAL_ADC_Start+0x16c>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	0c9a      	lsrs	r2, r3, #18
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000d94:	e002      	b.n	8000d9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f9      	bne.n	8000d96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d174      	bne.n	8000e9a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db4:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <HAL_ADC_Start+0x170>)
 8000db6:	4013      	ands	r3, r2
 8000db8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dea:	d106      	bne.n	8000dfa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	f023 0206 	bic.w	r2, r3, #6
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	645a      	str	r2, [r3, #68]	; 0x44
 8000df8:	e002      	b.n	8000e00 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_ADC_Start+0x174>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10f      	bne.n	8000e3e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d136      	bne.n	8000e9a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	e02d      	b.n	8000e9a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <HAL_ADC_Start+0x178>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d10e      	bne.n	8000e66 <HAL_ADC_Start+0x126>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d107      	bne.n	8000e66 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e64:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_ADC_Start+0x174>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d113      	bne.n	8000e9a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <HAL_ADC_Start+0x17c>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d10e      	bne.n	8000e9a <HAL_ADC_Start+0x15a>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d107      	bne.n	8000e9a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e98:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	431bde83 	.word	0x431bde83
 8000eb0:	fffff8fe 	.word	0xfffff8fe
 8000eb4:	40012300 	.word	0x40012300
 8000eb8:	40012000 	.word	0x40012000
 8000ebc:	40012200 	.word	0x40012200

08000ec0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d101      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x1c>
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	e12a      	b.n	800114e <HAL_ADC_ConfigChannel+0x272>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b09      	cmp	r3, #9
 8000f06:	d93a      	bls.n	8000f7e <HAL_ADC_ConfigChannel+0xa2>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f10:	d035      	beq.n	8000f7e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68d9      	ldr	r1, [r3, #12]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	3b1e      	subs	r3, #30
 8000f28:	2207      	movs	r2, #7
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	400a      	ands	r2, r1
 8000f36:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a87      	ldr	r2, [pc, #540]	; (800115c <HAL_ADC_ConfigChannel+0x280>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d10a      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68d9      	ldr	r1, [r3, #12]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	061a      	lsls	r2, r3, #24
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f56:	e035      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68d9      	ldr	r1, [r3, #12]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4403      	add	r3, r0
 8000f70:	3b1e      	subs	r3, #30
 8000f72:	409a      	lsls	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f7c:	e022      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6919      	ldr	r1, [r3, #16]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	2207      	movs	r2, #7
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43da      	mvns	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6919      	ldr	r1, [r3, #16]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4403      	add	r3, r0
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b06      	cmp	r3, #6
 8000fca:	d824      	bhi.n	8001016 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	3b05      	subs	r3, #5
 8000fde:	221f      	movs	r2, #31
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	400a      	ands	r2, r1
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	3b05      	subs	r3, #5
 8001008:	fa00 f203 	lsl.w	r2, r0, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	635a      	str	r2, [r3, #52]	; 0x34
 8001014:	e04c      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b0c      	cmp	r3, #12
 800101c:	d824      	bhi.n	8001068 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	3b23      	subs	r3, #35	; 0x23
 8001030:	221f      	movs	r2, #31
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	400a      	ands	r2, r1
 800103e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	3b23      	subs	r3, #35	; 0x23
 800105a:	fa00 f203 	lsl.w	r2, r0, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	631a      	str	r2, [r3, #48]	; 0x30
 8001066:	e023      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3b41      	subs	r3, #65	; 0x41
 800107a:	221f      	movs	r2, #31
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43da      	mvns	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	400a      	ands	r2, r1
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	3b41      	subs	r3, #65	; 0x41
 80010a4:	fa00 f203 	lsl.w	r2, r0, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <HAL_ADC_ConfigChannel+0x284>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10a      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x1f4>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010c2:	d105      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <HAL_ADC_ConfigChannel+0x288>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <HAL_ADC_ConfigChannel+0x288>)
 80010ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80010ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a22      	ldr	r2, [pc, #136]	; (8001160 <HAL_ADC_ConfigChannel+0x284>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d109      	bne.n	80010ee <HAL_ADC_ConfigChannel+0x212>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d105      	bne.n	80010ee <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_ADC_ConfigChannel+0x288>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <HAL_ADC_ConfigChannel+0x288>)
 80010e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <HAL_ADC_ConfigChannel+0x284>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d125      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x268>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_ADC_ConfigChannel+0x280>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d003      	beq.n	800110a <HAL_ADC_ConfigChannel+0x22e>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b11      	cmp	r3, #17
 8001108:	d11c      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_ADC_ConfigChannel+0x288>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_ADC_ConfigChannel+0x288>)
 8001110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001114:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <HAL_ADC_ConfigChannel+0x280>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d111      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_ADC_ConfigChannel+0x28c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_ADC_ConfigChannel+0x290>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9a      	lsrs	r2, r3, #18
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001136:	e002      	b.n	800113e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3b01      	subs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f9      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	10000012 	.word	0x10000012
 8001160:	40012000 	.word	0x40012000
 8001164:	40012300 	.word	0x40012300
 8001168:	20000000 	.word	0x20000000
 800116c:	431bde83 	.word	0x431bde83

08001170 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001178:	4b78      	ldr	r3, [pc, #480]	; (800135c <ADC_Init+0x1ec>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4a77      	ldr	r2, [pc, #476]	; (800135c <ADC_Init+0x1ec>)
 800117e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001182:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001184:	4b75      	ldr	r3, [pc, #468]	; (800135c <ADC_Init+0x1ec>)
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4973      	ldr	r1, [pc, #460]	; (800135c <ADC_Init+0x1ec>)
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6859      	ldr	r1, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	021a      	lsls	r2, r3, #8
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6859      	ldr	r1, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6899      	ldr	r1, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	4a58      	ldr	r2, [pc, #352]	; (8001360 <ADC_Init+0x1f0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d022      	beq.n	800124a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001212:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6899      	ldr	r1, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6899      	ldr	r1, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	e00f      	b.n	800126a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001268:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0202 	bic.w	r2, r2, #2
 8001278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6899      	ldr	r1, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	005a      	lsls	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d01b      	beq.n	80012d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6859      	ldr	r1, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	3b01      	subs	r3, #1
 80012c4:	035a      	lsls	r2, r3, #13
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	e007      	b.n	80012e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	051a      	lsls	r2, r3, #20
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001314:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6899      	ldr	r1, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001322:	025a      	lsls	r2, r3, #9
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800133a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6899      	ldr	r1, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	029a      	lsls	r2, r3, #10
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	609a      	str	r2, [r3, #8]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40012300 	.word	0x40012300
 8001360:	0f000001 	.word	0x0f000001

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	4313      	orrs	r3, r2
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00
 80013a8:	05fa0000 	.word	0x05fa0000

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f7ff ff8e 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff29 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff3e 	bl	80013ac <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff8e 	bl	8001458 <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5d 	bl	8001404 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff31 	bl	80013c8 <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa2 	bl	80014c0 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e175      	b.n	8001894 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8164 	bne.w	800188e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d00b      	beq.n	80015e6 <HAL_GPIO_Init+0x5e>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015da:	2b11      	cmp	r3, #17
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d130      	bne.n	8001648 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 0201 	and.w	r2, r3, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x100>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b12      	cmp	r3, #18
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80be 	beq.w	800188e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_GPIO_Init+0x320>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a64      	ldr	r2, [pc, #400]	; (80018a8 <HAL_GPIO_Init+0x320>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <HAL_GPIO_Init+0x320>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800172a:	4a60      	ldr	r2, [pc, #384]	; (80018ac <HAL_GPIO_Init+0x324>)
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_GPIO_Init+0x328>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d037      	beq.n	80017c6 <HAL_GPIO_Init+0x23e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a56      	ldr	r2, [pc, #344]	; (80018b4 <HAL_GPIO_Init+0x32c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d031      	beq.n	80017c2 <HAL_GPIO_Init+0x23a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a55      	ldr	r2, [pc, #340]	; (80018b8 <HAL_GPIO_Init+0x330>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d02b      	beq.n	80017be <HAL_GPIO_Init+0x236>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a54      	ldr	r2, [pc, #336]	; (80018bc <HAL_GPIO_Init+0x334>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d025      	beq.n	80017ba <HAL_GPIO_Init+0x232>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a53      	ldr	r2, [pc, #332]	; (80018c0 <HAL_GPIO_Init+0x338>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01f      	beq.n	80017b6 <HAL_GPIO_Init+0x22e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_GPIO_Init+0x33c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <HAL_GPIO_Init+0x22a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a51      	ldr	r2, [pc, #324]	; (80018c8 <HAL_GPIO_Init+0x340>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_GPIO_Init+0x226>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a50      	ldr	r2, [pc, #320]	; (80018cc <HAL_GPIO_Init+0x344>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_GPIO_Init+0x222>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4f      	ldr	r2, [pc, #316]	; (80018d0 <HAL_GPIO_Init+0x348>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x21e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4e      	ldr	r2, [pc, #312]	; (80018d4 <HAL_GPIO_Init+0x34c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_GPIO_Init+0x21a>
 800179e:	2309      	movs	r3, #9
 80017a0:	e012      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017a2:	230a      	movs	r3, #10
 80017a4:	e010      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017a6:	2308      	movs	r3, #8
 80017a8:	e00e      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e00c      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017ae:	2306      	movs	r3, #6
 80017b0:	e00a      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017b2:	2305      	movs	r3, #5
 80017b4:	e008      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017b6:	2304      	movs	r3, #4
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017ba:	2303      	movs	r3, #3
 80017bc:	e004      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017be:	2302      	movs	r3, #2
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017c6:	2300      	movs	r3, #0
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f002 0203 	and.w	r2, r2, #3
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	4093      	lsls	r3, r2
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017d8:	4934      	ldr	r1, [pc, #208]	; (80018ac <HAL_GPIO_Init+0x324>)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e6:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <HAL_GPIO_Init+0x350>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180a:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <HAL_GPIO_Init+0x350>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <HAL_GPIO_Init+0x350>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001834:	4a28      	ldr	r2, [pc, #160]	; (80018d8 <HAL_GPIO_Init+0x350>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_GPIO_Init+0x350>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185e:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <HAL_GPIO_Init+0x350>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_GPIO_Init+0x350>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001888:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <HAL_GPIO_Init+0x350>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3301      	adds	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	f67f ae86 	bls.w	80015a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800189c:	bf00      	nop
 800189e:	3724      	adds	r7, #36	; 0x24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40013800 	.word	0x40013800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40021400 	.word	0x40021400
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40021c00 	.word	0x40021c00
 80018d0:	40022000 	.word	0x40022000
 80018d4:	40022400 	.word	0x40022400
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
 80018e8:	4613      	mov	r3, r2
 80018ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80018f8:	e003      	b.n	8001902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	041a      	lsls	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	619a      	str	r2, [r3, #24]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e29b      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8087 	beq.w	8001a42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001934:	4b96      	ldr	r3, [pc, #600]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	d00c      	beq.n	800195a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001940:	4b93      	ldr	r3, [pc, #588]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d112      	bne.n	8001972 <HAL_RCC_OscConfig+0x62>
 800194c:	4b90      	ldr	r3, [pc, #576]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	4b8d      	ldr	r3, [pc, #564]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d06c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x130>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d168      	bne.n	8001a40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e275      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x7a>
 800197c:	4b84      	ldr	r3, [pc, #528]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a83      	ldr	r2, [pc, #524]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e02e      	b.n	80019e8 <HAL_RCC_OscConfig+0xd8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x9c>
 8001992:	4b7f      	ldr	r3, [pc, #508]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7e      	ldr	r2, [pc, #504]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b7c      	ldr	r3, [pc, #496]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a7b      	ldr	r2, [pc, #492]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xd8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0xc0>
 80019b6:	4b76      	ldr	r3, [pc, #472]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a75      	ldr	r2, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xd8>
 80019d0:	4b6f      	ldr	r3, [pc, #444]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6e      	ldr	r2, [pc, #440]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b6c      	ldr	r3, [pc, #432]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a6b      	ldr	r2, [pc, #428]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f956 	bl	8000ca0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff f952 	bl	8000ca0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e229      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b61      	ldr	r3, [pc, #388]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe8>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff f942 	bl	8000ca0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff f93e 	bl	8000ca0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e215      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x110>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d069      	beq.n	8001b22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4e:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x190>
 8001a66:	4b4a      	ldr	r3, [pc, #296]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x17a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1e9      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	493d      	ldr	r1, [pc, #244]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e040      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d023      	beq.n	8001af0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f8f4 	bl	8000ca0 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff f8f0 	bl	8000ca0 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1c7      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4929      	ldr	r1, [pc, #164]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
 8001aee:	e018      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f8d0 	bl	8000ca0 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff f8cc 	bl	8000ca0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e1a3      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d038      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d019      	beq.n	8001b6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3a:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff f8ad 	bl	8000ca0 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7ff f8a9 	bl	8000ca0 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e180      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x23a>
 8001b68:	e01a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7ff f893 	bl	8000ca0 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff f88f 	bl	8000ca0 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d903      	bls.n	8001b94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e166      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
 8001b90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	4b92      	ldr	r3, [pc, #584]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1ee      	bne.n	8001b7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a4 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a88      	ldr	r2, [pc, #544]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b86      	ldr	r3, [pc, #536]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd6:	4b83      	ldr	r3, [pc, #524]	; (8001de4 <HAL_RCC_OscConfig+0x4d4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001be2:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <HAL_RCC_OscConfig+0x4d4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7f      	ldr	r2, [pc, #508]	; (8001de4 <HAL_RCC_OscConfig+0x4d4>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bee:	f7ff f857 	bl	8000ca0 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7ff f853 	bl	8000ca0 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b64      	cmp	r3, #100	; 0x64
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e12a      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c08:	4b76      	ldr	r3, [pc, #472]	; (8001de4 <HAL_RCC_OscConfig+0x4d4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x31a>
 8001c1c:	4b70      	ldr	r3, [pc, #448]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a6f      	ldr	r2, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70
 8001c28:	e02d      	b.n	8001c86 <HAL_RCC_OscConfig+0x376>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x33c>
 8001c32:	4b6b      	ldr	r3, [pc, #428]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a6a      	ldr	r2, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	4a67      	ldr	r2, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4a:	e01c      	b.n	8001c86 <HAL_RCC_OscConfig+0x376>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x35e>
 8001c54:	4b62      	ldr	r3, [pc, #392]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	4a61      	ldr	r2, [pc, #388]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c60:	4b5f      	ldr	r3, [pc, #380]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	4a5e      	ldr	r2, [pc, #376]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6c:	e00b      	b.n	8001c86 <HAL_RCC_OscConfig+0x376>
 8001c6e:	4b5c      	ldr	r3, [pc, #368]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a5b      	ldr	r2, [pc, #364]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d015      	beq.n	8001cba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f807 	bl	8000ca0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff f803 	bl	8000ca0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0d8      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ee      	beq.n	8001c96 <HAL_RCC_OscConfig+0x386>
 8001cb8:	e014      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7fe fff1 	bl	8000ca0 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7fe ffed 	bl	8000ca0 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0c2      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ee      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a3c      	ldr	r2, [pc, #240]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80ae 	beq.w	8001e5c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d06d      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d14b      	bne.n	8001dac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7fe ffbe 	bl	8000ca0 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe ffba 	bl	8000ca0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e091      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	071b      	lsls	r3, r3, #28
 8001d72:	491b      	ldr	r1, [pc, #108]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7fe ff8c 	bl	8000ca0 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7fe ff88 	bl	8000ca0 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e05f      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x47c>
 8001daa:	e057      	b.n	8001e5c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7fe ff72 	bl	8000ca0 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe ff6e 	bl	8000ca0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e045      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4b0>
 8001dde:	e03d      	b.n	8001e5c <HAL_RCC_OscConfig+0x54c>
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_RCC_OscConfig+0x558>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d030      	beq.n	8001e58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d129      	bne.n	8001e58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d122      	bne.n	8001e58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d119      	bne.n	8001e58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	3b01      	subs	r3, #1
 8001e32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10f      	bne.n	8001e58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0d0      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e84:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d910      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 020f 	bic.w	r2, r3, #15
 8001e9a:	4965      	ldr	r1, [pc, #404]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0b8      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ecc:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a58      	ldr	r2, [pc, #352]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ed6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef0:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	494d      	ldr	r1, [pc, #308]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d040      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d115      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e07f      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	4b41      	ldr	r3, [pc, #260]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e073      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06b      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b39      	ldr	r3, [pc, #228]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4936      	ldr	r1, [pc, #216]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f60:	f7fe fe9e 	bl	8000ca0 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7fe fe9a 	bl	8000ca0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e053      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1eb      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d210      	bcs.n	8001fc0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 020f 	bic.w	r2, r3, #15
 8001fa6:	4922      	ldr	r1, [pc, #136]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e032      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4916      	ldr	r1, [pc, #88]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ffe:	f000 f821 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002002:	4601      	mov	r1, r0
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_RCC_ClockConfig+0x1cc>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	fa21 f303 	lsr.w	r3, r1, r3
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1d0>)
 8002018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x1d4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fdfa 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00
 8002034:	40023800 	.word	0x40023800
 8002038:	08002adc 	.word	0x08002adc
 800203c:	20000000 	.word	0x20000000
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800205a:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d007      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x32>
 8002066:	2b08      	cmp	r3, #8
 8002068:	d008      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x38>
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 80b4 	bne.w	80021d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002072:	60bb      	str	r3, [r7, #8]
      break;
 8002074:	e0b3      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002076:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002078:	60bb      	str	r3, [r7, #8]
      break;
 800207a:	e0b0      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800207c:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002084:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002086:	4b58      	ldr	r3, [pc, #352]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d04a      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002092:	4b55      	ldr	r3, [pc, #340]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	f04f 0400 	mov.w	r4, #0
 800209c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	ea03 0501 	and.w	r5, r3, r1
 80020a8:	ea04 0602 	and.w	r6, r4, r2
 80020ac:	4629      	mov	r1, r5
 80020ae:	4632      	mov	r2, r6
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f04f 0400 	mov.w	r4, #0
 80020b8:	0154      	lsls	r4, r2, #5
 80020ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020be:	014b      	lsls	r3, r1, #5
 80020c0:	4619      	mov	r1, r3
 80020c2:	4622      	mov	r2, r4
 80020c4:	1b49      	subs	r1, r1, r5
 80020c6:	eb62 0206 	sbc.w	r2, r2, r6
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	f04f 0400 	mov.w	r4, #0
 80020d2:	0194      	lsls	r4, r2, #6
 80020d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020d8:	018b      	lsls	r3, r1, #6
 80020da:	1a5b      	subs	r3, r3, r1
 80020dc:	eb64 0402 	sbc.w	r4, r4, r2
 80020e0:	f04f 0100 	mov.w	r1, #0
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	00e2      	lsls	r2, r4, #3
 80020ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020ee:	00d9      	lsls	r1, r3, #3
 80020f0:	460b      	mov	r3, r1
 80020f2:	4614      	mov	r4, r2
 80020f4:	195b      	adds	r3, r3, r5
 80020f6:	eb44 0406 	adc.w	r4, r4, r6
 80020fa:	f04f 0100 	mov.w	r1, #0
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	02a2      	lsls	r2, r4, #10
 8002104:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002108:	0299      	lsls	r1, r3, #10
 800210a:	460b      	mov	r3, r1
 800210c:	4614      	mov	r4, r2
 800210e:	4618      	mov	r0, r3
 8002110:	4621      	mov	r1, r4
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f04f 0400 	mov.w	r4, #0
 8002118:	461a      	mov	r2, r3
 800211a:	4623      	mov	r3, r4
 800211c:	f7fe f88c 	bl	8000238 <__aeabi_uldivmod>
 8002120:	4603      	mov	r3, r0
 8002122:	460c      	mov	r4, r1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e049      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002128:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	f04f 0400 	mov.w	r4, #0
 8002132:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	ea03 0501 	and.w	r5, r3, r1
 800213e:	ea04 0602 	and.w	r6, r4, r2
 8002142:	4629      	mov	r1, r5
 8002144:	4632      	mov	r2, r6
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	f04f 0400 	mov.w	r4, #0
 800214e:	0154      	lsls	r4, r2, #5
 8002150:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002154:	014b      	lsls	r3, r1, #5
 8002156:	4619      	mov	r1, r3
 8002158:	4622      	mov	r2, r4
 800215a:	1b49      	subs	r1, r1, r5
 800215c:	eb62 0206 	sbc.w	r2, r2, r6
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	f04f 0400 	mov.w	r4, #0
 8002168:	0194      	lsls	r4, r2, #6
 800216a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800216e:	018b      	lsls	r3, r1, #6
 8002170:	1a5b      	subs	r3, r3, r1
 8002172:	eb64 0402 	sbc.w	r4, r4, r2
 8002176:	f04f 0100 	mov.w	r1, #0
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	00e2      	lsls	r2, r4, #3
 8002180:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002184:	00d9      	lsls	r1, r3, #3
 8002186:	460b      	mov	r3, r1
 8002188:	4614      	mov	r4, r2
 800218a:	195b      	adds	r3, r3, r5
 800218c:	eb44 0406 	adc.w	r4, r4, r6
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	02a2      	lsls	r2, r4, #10
 800219a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800219e:	0299      	lsls	r1, r3, #10
 80021a0:	460b      	mov	r3, r1
 80021a2:	4614      	mov	r4, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	4621      	mov	r1, r4
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f04f 0400 	mov.w	r4, #0
 80021ae:	461a      	mov	r2, r3
 80021b0:	4623      	mov	r3, r4
 80021b2:	f7fe f841 	bl	8000238 <__aeabi_uldivmod>
 80021b6:	4603      	mov	r3, r0
 80021b8:	460c      	mov	r4, r1
 80021ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	3301      	adds	r3, #1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d4:	60bb      	str	r3, [r7, #8]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021da:	60bb      	str	r3, [r7, #8]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	68bb      	ldr	r3, [r7, #8]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	00f42400 	.word	0x00f42400

080021f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e01d      	b.n	800223e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fc58 	bl	8000acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3304      	adds	r3, #4
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f000 fa36 	bl	80026a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_TIM_Base_Start_IT+0x50>)
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b06      	cmp	r3, #6
 8002270:	d00b      	beq.n	800228a <HAL_TIM_Base_Start_IT+0x42>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d007      	beq.n	800228a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	00010007 	.word	0x00010007

0800229c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0202 	mvn.w	r2, #2
 80022c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f9c0 	bl	8002664 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f9b2 	bl	8002650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f9c3 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b04      	cmp	r3, #4
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b04      	cmp	r3, #4
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0204 	mvn.w	r2, #4
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f996 	bl	8002664 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f988 	bl	8002650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f999 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b08      	cmp	r3, #8
 8002358:	d122      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b08      	cmp	r3, #8
 8002366:	d11b      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0208 	mvn.w	r2, #8
 8002370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2204      	movs	r2, #4
 8002376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f96c 	bl	8002664 <HAL_TIM_IC_CaptureCallback>
 800238c:	e005      	b.n	800239a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f95e 	bl	8002650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f96f 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d122      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d11b      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0210 	mvn.w	r2, #16
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2208      	movs	r2, #8
 80023ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f942 	bl	8002664 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f934 	bl	8002650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f945 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0201 	mvn.w	r2, #1
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe f924 	bl	8000668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	2b80      	cmp	r3, #128	; 0x80
 800242c:	d10e      	bne.n	800244c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002438:	2b80      	cmp	r3, #128	; 0x80
 800243a:	d107      	bne.n	800244c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fafc 	bl	8002a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245a:	d10e      	bne.n	800247a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b80      	cmp	r3, #128	; 0x80
 8002468:	d107      	bne.n	800247a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 faef 	bl	8002a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	d10e      	bne.n	80024a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	d107      	bne.n	80024a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800249e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8f3 	bl	800268c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d10e      	bne.n	80024d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d107      	bne.n	80024d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f06f 0220 	mvn.w	r2, #32
 80024ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 faaf 	bl	8002a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_TIM_ConfigClockSource+0x18>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0a6      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x166>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4b4f      	ldr	r3, [pc, #316]	; (800264c <HAL_TIM_ConfigClockSource+0x170>)
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d067      	beq.n	80025fc <HAL_TIM_ConfigClockSource+0x120>
 800252c:	2b40      	cmp	r3, #64	; 0x40
 800252e:	d80b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x6c>
 8002530:	2b10      	cmp	r3, #16
 8002532:	d073      	beq.n	800261c <HAL_TIM_ConfigClockSource+0x140>
 8002534:	2b10      	cmp	r3, #16
 8002536:	d802      	bhi.n	800253e <HAL_TIM_ConfigClockSource+0x62>
 8002538:	2b00      	cmp	r3, #0
 800253a:	d06f      	beq.n	800261c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800253c:	e078      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800253e:	2b20      	cmp	r3, #32
 8002540:	d06c      	beq.n	800261c <HAL_TIM_ConfigClockSource+0x140>
 8002542:	2b30      	cmp	r3, #48	; 0x30
 8002544:	d06a      	beq.n	800261c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002546:	e073      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002548:	2b70      	cmp	r3, #112	; 0x70
 800254a:	d00d      	beq.n	8002568 <HAL_TIM_ConfigClockSource+0x8c>
 800254c:	2b70      	cmp	r3, #112	; 0x70
 800254e:	d804      	bhi.n	800255a <HAL_TIM_ConfigClockSource+0x7e>
 8002550:	2b50      	cmp	r3, #80	; 0x50
 8002552:	d033      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0xe0>
 8002554:	2b60      	cmp	r3, #96	; 0x60
 8002556:	d041      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002558:	e06a      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800255a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255e:	d066      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x152>
 8002560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002564:	d017      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002566:	e063      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6899      	ldr	r1, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f000 f9ac 	bl	80028d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800258a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	609a      	str	r2, [r3, #8]
      break;
 8002594:	e04c      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6899      	ldr	r1, [r3, #8]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f000 f995 	bl	80028d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b8:	609a      	str	r2, [r3, #8]
      break;
 80025ba:	e039      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	461a      	mov	r2, r3
 80025ca:	f000 f909 	bl	80027e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2150      	movs	r1, #80	; 0x50
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f962 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 80025da:	e029      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	461a      	mov	r2, r3
 80025ea:	f000 f928 	bl	800283e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2160      	movs	r1, #96	; 0x60
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f952 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 80025fa:	e019      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	461a      	mov	r2, r3
 800260a:	f000 f8e9 	bl	80027e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2140      	movs	r1, #64	; 0x40
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f942 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 800261a:	e009      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f000 f939 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 800262c:	e000      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800262e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	fffeff88 	.word	0xfffeff88

08002650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a40      	ldr	r2, [pc, #256]	; (80027b4 <TIM_Base_SetConfig+0x114>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d013      	beq.n	80026e0 <TIM_Base_SetConfig+0x40>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026be:	d00f      	beq.n	80026e0 <TIM_Base_SetConfig+0x40>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3d      	ldr	r2, [pc, #244]	; (80027b8 <TIM_Base_SetConfig+0x118>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00b      	beq.n	80026e0 <TIM_Base_SetConfig+0x40>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a3c      	ldr	r2, [pc, #240]	; (80027bc <TIM_Base_SetConfig+0x11c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d007      	beq.n	80026e0 <TIM_Base_SetConfig+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a3b      	ldr	r2, [pc, #236]	; (80027c0 <TIM_Base_SetConfig+0x120>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d003      	beq.n	80026e0 <TIM_Base_SetConfig+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a3a      	ldr	r2, [pc, #232]	; (80027c4 <TIM_Base_SetConfig+0x124>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d108      	bne.n	80026f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <TIM_Base_SetConfig+0x114>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02b      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d027      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a2c      	ldr	r2, [pc, #176]	; (80027b8 <TIM_Base_SetConfig+0x118>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d023      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a2b      	ldr	r2, [pc, #172]	; (80027bc <TIM_Base_SetConfig+0x11c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01f      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a2a      	ldr	r2, [pc, #168]	; (80027c0 <TIM_Base_SetConfig+0x120>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01b      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <TIM_Base_SetConfig+0x124>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d017      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <TIM_Base_SetConfig+0x128>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a27      	ldr	r2, [pc, #156]	; (80027cc <TIM_Base_SetConfig+0x12c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00f      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a26      	ldr	r2, [pc, #152]	; (80027d0 <TIM_Base_SetConfig+0x130>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00b      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <TIM_Base_SetConfig+0x134>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <TIM_Base_SetConfig+0x138>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d003      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a23      	ldr	r2, [pc, #140]	; (80027dc <TIM_Base_SetConfig+0x13c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d108      	bne.n	8002764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <TIM_Base_SetConfig+0x114>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d003      	beq.n	8002798 <TIM_Base_SetConfig+0xf8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <TIM_Base_SetConfig+0x124>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d103      	bne.n	80027a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	615a      	str	r2, [r3, #20]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40000800 	.word	0x40000800
 80027c0:	40000c00 	.word	0x40000c00
 80027c4:	40010400 	.word	0x40010400
 80027c8:	40014000 	.word	0x40014000
 80027cc:	40014400 	.word	0x40014400
 80027d0:	40014800 	.word	0x40014800
 80027d4:	40001800 	.word	0x40001800
 80027d8:	40001c00 	.word	0x40001c00
 80027dc:	40002000 	.word	0x40002000

080027e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f023 0201 	bic.w	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800280a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f023 030a 	bic.w	r3, r3, #10
 800281c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	621a      	str	r2, [r3, #32]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800283e:	b480      	push	{r7}
 8002840:	b087      	sub	sp, #28
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0210 	bic.w	r2, r3, #16
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	031b      	lsls	r3, r3, #12
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800287a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	621a      	str	r2, [r3, #32]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f043 0307 	orr.w	r3, r3, #7
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	021a      	lsls	r2, r3, #8
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	609a      	str	r2, [r3, #8]
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002928:	2302      	movs	r3, #2
 800292a:	e06d      	b.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a30      	ldr	r2, [pc, #192]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2f      	ldr	r2, [pc, #188]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d108      	bne.n	8002972 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002966:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002978:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a20      	ldr	r2, [pc, #128]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d022      	beq.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299e:	d01d      	beq.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d018      	beq.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d013      	beq.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00e      	beq.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d009      	beq.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d10c      	bne.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40010400 	.word	0x40010400
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40001800 	.word	0x40001800

08002a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <__libc_init_array>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	4e0d      	ldr	r6, [pc, #52]	; (8002aa4 <__libc_init_array+0x38>)
 8002a70:	4c0d      	ldr	r4, [pc, #52]	; (8002aa8 <__libc_init_array+0x3c>)
 8002a72:	1ba4      	subs	r4, r4, r6
 8002a74:	10a4      	asrs	r4, r4, #2
 8002a76:	2500      	movs	r5, #0
 8002a78:	42a5      	cmp	r5, r4
 8002a7a:	d109      	bne.n	8002a90 <__libc_init_array+0x24>
 8002a7c:	4e0b      	ldr	r6, [pc, #44]	; (8002aac <__libc_init_array+0x40>)
 8002a7e:	4c0c      	ldr	r4, [pc, #48]	; (8002ab0 <__libc_init_array+0x44>)
 8002a80:	f000 f820 	bl	8002ac4 <_init>
 8002a84:	1ba4      	subs	r4, r4, r6
 8002a86:	10a4      	asrs	r4, r4, #2
 8002a88:	2500      	movs	r5, #0
 8002a8a:	42a5      	cmp	r5, r4
 8002a8c:	d105      	bne.n	8002a9a <__libc_init_array+0x2e>
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
 8002a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a94:	4798      	blx	r3
 8002a96:	3501      	adds	r5, #1
 8002a98:	e7ee      	b.n	8002a78 <__libc_init_array+0xc>
 8002a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a9e:	4798      	blx	r3
 8002aa0:	3501      	adds	r5, #1
 8002aa2:	e7f2      	b.n	8002a8a <__libc_init_array+0x1e>
 8002aa4:	08002af4 	.word	0x08002af4
 8002aa8:	08002af4 	.word	0x08002af4
 8002aac:	08002af4 	.word	0x08002af4
 8002ab0:	08002af8 	.word	0x08002af8

08002ab4 <memset>:
 8002ab4:	4402      	add	r2, r0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d100      	bne.n	8002abe <memset+0xa>
 8002abc:	4770      	bx	lr
 8002abe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac2:	e7f9      	b.n	8002ab8 <memset+0x4>

08002ac4 <_init>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	bf00      	nop
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr

08002ad0 <_fini>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr
